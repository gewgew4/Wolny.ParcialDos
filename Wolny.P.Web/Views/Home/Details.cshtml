@using System.Globalization
@model Wolny.P.Web.Models.RecorridoModel

@{
    ViewData["Title"] = "Details";
}

<h1>Details</h1>

<div>
    <h4>Recorrido</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.FechaFin)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.FechaFin)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.FechaInicio)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.FechaInicio)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Finalizado)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Finalizado)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Id)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Id)
        </dd>
        @if (Model.Camion != null)
        {
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Camion)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Camion.Patente)
        </dd>
        }
    </dl>
</div>

<div id="map" style="height: 400px;"></div>
<script>
    function initMap() {
        // Extract all coordinates from the PlanRecorridos
        var coordinates = [
    @foreach (var plan in Model.PlanRecorridos)
    {
        <text>{ lat: @plan.Ciudad.Ubicacion.Latitud.ToString("0.00", new CultureInfo("en-US", false)), lng: @plan.Ciudad.Ubicacion.Longitud.ToString("0.00", new CultureInfo("en-US", false)) }, </text>
    }
                ];

        // Add the first coordinate again to close the circle
        coordinates.push({ lat: @Model.PlanRecorridos.First().Ciudad.Ubicacion.Latitud.ToString("0.00", new CultureInfo("en-US", false)), lng: @Model.PlanRecorridos.First().Ciudad.Ubicacion.Longitud.ToString("0.00", new CultureInfo("en-US", false)) });

        // Create a map centered at the first coordinate
        var map = new google.maps.Map(document.getElementById('map'), {
            center: coordinates[0],
            zoom: 5 // Adjust the zoom level as needed
        });

        // Create a polyline to connect the coordinates
        var flightPath = new google.maps.Polyline({
            path: coordinates,
            geodesic: true,
            strokeColor: '#FF0000',
            strokeOpacity: 1.0,
            strokeWeight: 2
        });

        // Set the polyline on the map
        flightPath.setMap(map);
    }
</script>
<script async defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAWK-JfF3vdznCMNBNkY_D3wLQQiGPo9kE&callback=initMap">
</script>
